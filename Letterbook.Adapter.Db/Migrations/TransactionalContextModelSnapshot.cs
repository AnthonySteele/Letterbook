// <auto-generated />
using Letterbook.Adapter.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Letterbook.Adapter.Db.Migrations
{
    [DbContext(typeof(TransactionalContext))]
    partial class TransactionalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActorAudience", b =>
                {
                    b.Property<string>("AudiencesId")
                        .HasColumnType("text");

                    b.Property<string>("MembersId")
                        .HasColumnType("text");

                    b.HasKey("AudiencesId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("ActorAudience");
                });

            modelBuilder.Entity("JoinObjectAudience", b =>
                {
                    b.Property<string>("AudienceId")
                        .HasColumnType("text");

                    b.Property<string>("ObjectsId")
                        .HasColumnType("text");

                    b.HasKey("AudienceId", "ObjectsId");

                    b.HasIndex("ObjectsId");

                    b.ToTable("JoinObjectAudience");
                });

            modelBuilder.Entity("Letterbook.Adapter.Db.Entities.JoinObjectActor", b =>
                {
                    b.Property<string>("ActorId")
                        .HasColumnType("text");

                    b.Property<string>("ApObject3Id")
                        .HasColumnType("text");

                    b.Property<string>("ObjectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Relationship")
                        .HasColumnType("integer");

                    b.HasKey("ActorId", "ApObject3Id");

                    b.HasIndex("ApObject3Id");

                    b.ToTable("JoinObjectActor");

                    b.HasDiscriminator<int>("Relationship").HasValue(3);
                });

            modelBuilder.Entity("Letterbook.Core.Models.Actor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Letterbook.Core.Models.ApObject", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ActorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocalId")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("Letterbook.Core.Models.Audience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("ActorAudience", b =>
                {
                    b.HasOne("Letterbook.Core.Models.Audience", null)
                        .WithMany()
                        .HasForeignKey("AudiencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Letterbook.Core.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JoinObjectAudience", b =>
                {
                    b.HasOne("Letterbook.Core.Models.Audience", null)
                        .WithMany()
                        .HasForeignKey("AudienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Letterbook.Core.Models.ApObject", null)
                        .WithMany()
                        .HasForeignKey("ObjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Letterbook.Adapter.Db.Entities.JoinObjectActor", b =>
                {
                    b.HasOne("Letterbook.Core.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Letterbook.Core.Models.ApObject", null)
                        .WithMany()
                        .HasForeignKey("ApObject3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Letterbook.Core.Models.ApObject", b =>
                {
                    b.HasOne("Letterbook.Core.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");
                });
#pragma warning restore 612, 618
        }
    }
}
